<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
	  <TargetFramework>net6.0</TargetFramework>
	  <ImplicitUsings>enable</ImplicitUsings>
    <AssemblyName>IpfsShipyard.Ipfs.Http.Client</AssemblyName>
    <RootNamespace>Ipfs.Http</RootNamespace>
    <DocumentationFile>bin\$(Configuration)\$(TargetFramework)\$(AssemblyName).xml</DocumentationFile>
    <DebugType>full</DebugType>
    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>

    <!-- https://semver.org/spec/v2.0.0.html -->
    <Version>0.0.4</Version>
    <AssemblyVersion>$(Version)</AssemblyVersion>

    <!-- Nuget specs -->
    <PackageId>IpfsShipyard.Ipfs.Http.Client</PackageId>
    <Authors>IPFS Shipyard, Arlo Godfrey, Richard Schneider, Marshall Rosenstein</Authors>
    <Title>IPFS HTTP Client</Title>
    <Description>
    Backed by the IPFS Shipyard and developer community. Picking up where Richard Schneider left off.
    
    An easy to use .NET library for the IPFS HTTP Gateway API, and the Kubo RPC API v0.
    
    .NET standard 2.1 fork of Richard Schneider's Ipfs.Http.Client. Provides .Net client access to the InterPlanetary File System.
    </Description>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <PackageRequireLicenseAcceptance>false</PackageRequireLicenseAcceptance>
    <PackageReleaseNotes> </PackageReleaseNotes>
    <PackageTags>ipfs peer-to-peer distributed file-system</PackageTags>
    <IncludeSymbols>True</IncludeSymbols>
    <PackageProjectUrl>https://github.com/ipfs-shipyard/net-ipfs-http-client</PackageProjectUrl>
    <PackageIcon>icon.png</PackageIcon>
    <GeneratePackageOnBuild Condition=" '$(Configuration)' == 'Release' ">true</GeneratePackageOnBuild>

    <!-- Optional: Publish the repository URL in the built .nupkg (in the NuSpec <Repository> element) -->
    <PublishRepositoryUrl>true</PublishRepositoryUrl>
    <!-- Optional: Embed source files that are not tracked by the source control manager in the PDB -->
    <EmbedUntrackedSources>false</EmbedUntrackedSources>
    <!-- Optional: Build symbol package (.snupkg) to distribute the PDB containing Source Link -->
    <IncludeSymbols>true</IncludeSymbols>
    <SymbolPackageFormat>snupkg</SymbolPackageFormat>
    <AllowedOutputExtensionsInPackageBuildOutputFolder>.pdb;$(AllowedOutputExtensionsInPackageBuildOutputFolder)</AllowedOutputExtensionsInPackageBuildOutputFolder>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(TargetFramework)|$(Platform)'=='Debug|netstandard14|AnyCPU'">
    <DefineConstants>$(DefineConstants)TRACE; ASYNCSTREAM</DefineConstants>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(TargetFramework)|$(Platform)'=='Release|netstandard14|AnyCPU'">
    <DefineConstants>$(DefineConstants)TRACE; ASYNCSTREAM</DefineConstants>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(TargetFramework)|$(Platform)'=='Debug|netstandard2|AnyCPU'">
    <DefineConstants>$(DefineConstants)TRACE; ASYNCSTREAM</DefineConstants>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(TargetFramework)|$(Platform)'=='Release|netstandard2|AnyCPU'">
    <DefineConstants>$(DefineConstants)TRACE; ASYNCSTREAM</DefineConstants>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(TargetFramework)|$(Platform)'=='Debug|net45|AnyCPU'">
    <DefineConstants>$(DefineConstants)TRACE; ASYNCSTREAM</DefineConstants>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(TargetFramework)|$(Platform)'=='Release|net45|AnyCPU'">
    <DefineConstants>$(DefineConstants)TRACE; ASYNCSTREAM</DefineConstants>
  </PropertyGroup>
  <ItemGroup>
    <None Include="icon.png" Pack="true" PackagePath="\" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="IpfsShipyard.Ipfs.Core" Version="0.0.1" />
    <PackageReference Include="Microsoft.CSharp" Version="4.7.0" />
    <PackageReference Include="Newtonsoft.Json" Version="13.0.1" />
    <PackageReference Include="Multiformats.Base" Version="2.0.2" />
  </ItemGroup>

</Project>
